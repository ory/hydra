/*
Ory Hydra API

Documentation for all of Ory Hydra's APIs.

API version:
Contact: hi@ory.sh
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the DeviceUserAuthRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceUserAuthRequest{}

// DeviceUserAuthRequest struct for DeviceUserAuthRequest
type DeviceUserAuthRequest struct {
	// ID is the identifier (\"device challenge\") of the device grant request. It is used to identify the session.
	Challenge string        `json:"challenge"`
	Client    *OAuth2Client `json:"client,omitempty"`
	HandledAt *time.Time    `json:"handled_at,omitempty"`
	// RequestURL is the original Device Authorization URL requested.
	RequestUrl                   *string  `json:"request_url,omitempty"`
	RequestedAccessTokenAudience []string `json:"requested_access_token_audience,omitempty"`
	RequestedScope               []string `json:"requested_scope,omitempty"`
}

type _DeviceUserAuthRequest DeviceUserAuthRequest

// NewDeviceUserAuthRequest instantiates a new DeviceUserAuthRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceUserAuthRequest(challenge string) *DeviceUserAuthRequest {
	this := DeviceUserAuthRequest{}
	this.Challenge = challenge
	return &this
}

// NewDeviceUserAuthRequestWithDefaults instantiates a new DeviceUserAuthRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceUserAuthRequestWithDefaults() *DeviceUserAuthRequest {
	this := DeviceUserAuthRequest{}
	return &this
}

// GetChallenge returns the Challenge field value
func (o *DeviceUserAuthRequest) GetChallenge() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Challenge
}

// GetChallengeOk returns a tuple with the Challenge field value
// and a boolean to check if the value has been set.
func (o *DeviceUserAuthRequest) GetChallengeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Challenge, true
}

// SetChallenge sets field value
func (o *DeviceUserAuthRequest) SetChallenge(v string) {
	o.Challenge = v
}

// GetClient returns the Client field value if set, zero value otherwise.
func (o *DeviceUserAuthRequest) GetClient() OAuth2Client {
	if o == nil || IsNil(o.Client) {
		var ret OAuth2Client
		return ret
	}
	return *o.Client
}

// GetClientOk returns a tuple with the Client field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceUserAuthRequest) GetClientOk() (*OAuth2Client, bool) {
	if o == nil || IsNil(o.Client) {
		return nil, false
	}
	return o.Client, true
}

// HasClient returns a boolean if a field has been set.
func (o *DeviceUserAuthRequest) HasClient() bool {
	if o != nil && !IsNil(o.Client) {
		return true
	}

	return false
}

// SetClient gets a reference to the given OAuth2Client and assigns it to the Client field.
func (o *DeviceUserAuthRequest) SetClient(v OAuth2Client) {
	o.Client = &v
}

// GetHandledAt returns the HandledAt field value if set, zero value otherwise.
func (o *DeviceUserAuthRequest) GetHandledAt() time.Time {
	if o == nil || IsNil(o.HandledAt) {
		var ret time.Time
		return ret
	}
	return *o.HandledAt
}

// GetHandledAtOk returns a tuple with the HandledAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceUserAuthRequest) GetHandledAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.HandledAt) {
		return nil, false
	}
	return o.HandledAt, true
}

// HasHandledAt returns a boolean if a field has been set.
func (o *DeviceUserAuthRequest) HasHandledAt() bool {
	if o != nil && !IsNil(o.HandledAt) {
		return true
	}

	return false
}

// SetHandledAt gets a reference to the given time.Time and assigns it to the HandledAt field.
func (o *DeviceUserAuthRequest) SetHandledAt(v time.Time) {
	o.HandledAt = &v
}

// GetRequestUrl returns the RequestUrl field value if set, zero value otherwise.
func (o *DeviceUserAuthRequest) GetRequestUrl() string {
	if o == nil || IsNil(o.RequestUrl) {
		var ret string
		return ret
	}
	return *o.RequestUrl
}

// GetRequestUrlOk returns a tuple with the RequestUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceUserAuthRequest) GetRequestUrlOk() (*string, bool) {
	if o == nil || IsNil(o.RequestUrl) {
		return nil, false
	}
	return o.RequestUrl, true
}

// HasRequestUrl returns a boolean if a field has been set.
func (o *DeviceUserAuthRequest) HasRequestUrl() bool {
	if o != nil && !IsNil(o.RequestUrl) {
		return true
	}

	return false
}

// SetRequestUrl gets a reference to the given string and assigns it to the RequestUrl field.
func (o *DeviceUserAuthRequest) SetRequestUrl(v string) {
	o.RequestUrl = &v
}

// GetRequestedAccessTokenAudience returns the RequestedAccessTokenAudience field value if set, zero value otherwise.
func (o *DeviceUserAuthRequest) GetRequestedAccessTokenAudience() []string {
	if o == nil || IsNil(o.RequestedAccessTokenAudience) {
		var ret []string
		return ret
	}
	return o.RequestedAccessTokenAudience
}

// GetRequestedAccessTokenAudienceOk returns a tuple with the RequestedAccessTokenAudience field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceUserAuthRequest) GetRequestedAccessTokenAudienceOk() ([]string, bool) {
	if o == nil || IsNil(o.RequestedAccessTokenAudience) {
		return nil, false
	}
	return o.RequestedAccessTokenAudience, true
}

// HasRequestedAccessTokenAudience returns a boolean if a field has been set.
func (o *DeviceUserAuthRequest) HasRequestedAccessTokenAudience() bool {
	if o != nil && !IsNil(o.RequestedAccessTokenAudience) {
		return true
	}

	return false
}

// SetRequestedAccessTokenAudience gets a reference to the given []string and assigns it to the RequestedAccessTokenAudience field.
func (o *DeviceUserAuthRequest) SetRequestedAccessTokenAudience(v []string) {
	o.RequestedAccessTokenAudience = v
}

// GetRequestedScope returns the RequestedScope field value if set, zero value otherwise.
func (o *DeviceUserAuthRequest) GetRequestedScope() []string {
	if o == nil || IsNil(o.RequestedScope) {
		var ret []string
		return ret
	}
	return o.RequestedScope
}

// GetRequestedScopeOk returns a tuple with the RequestedScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceUserAuthRequest) GetRequestedScopeOk() ([]string, bool) {
	if o == nil || IsNil(o.RequestedScope) {
		return nil, false
	}
	return o.RequestedScope, true
}

// HasRequestedScope returns a boolean if a field has been set.
func (o *DeviceUserAuthRequest) HasRequestedScope() bool {
	if o != nil && !IsNil(o.RequestedScope) {
		return true
	}

	return false
}

// SetRequestedScope gets a reference to the given []string and assigns it to the RequestedScope field.
func (o *DeviceUserAuthRequest) SetRequestedScope(v []string) {
	o.RequestedScope = v
}

func (o DeviceUserAuthRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceUserAuthRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["challenge"] = o.Challenge
	if !IsNil(o.Client) {
		toSerialize["client"] = o.Client
	}
	if !IsNil(o.HandledAt) {
		toSerialize["handled_at"] = o.HandledAt
	}
	if !IsNil(o.RequestUrl) {
		toSerialize["request_url"] = o.RequestUrl
	}
	if !IsNil(o.RequestedAccessTokenAudience) {
		toSerialize["requested_access_token_audience"] = o.RequestedAccessTokenAudience
	}
	if !IsNil(o.RequestedScope) {
		toSerialize["requested_scope"] = o.RequestedScope
	}
	return toSerialize, nil
}

func (o *DeviceUserAuthRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"challenge",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeviceUserAuthRequest := _DeviceUserAuthRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDeviceUserAuthRequest)

	if err != nil {
		return err
	}

	*o = DeviceUserAuthRequest(varDeviceUserAuthRequest)

	return err
}

type NullableDeviceUserAuthRequest struct {
	value *DeviceUserAuthRequest
	isSet bool
}

func (v NullableDeviceUserAuthRequest) Get() *DeviceUserAuthRequest {
	return v.value
}

func (v *NullableDeviceUserAuthRequest) Set(val *DeviceUserAuthRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceUserAuthRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceUserAuthRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceUserAuthRequest(val *DeviceUserAuthRequest) *NullableDeviceUserAuthRequest {
	return &NullableDeviceUserAuthRequest{value: val, isSet: true}
}

func (v NullableDeviceUserAuthRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceUserAuthRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
