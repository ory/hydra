/*
Ory Hydra API

Documentation for all of Ory Hydra's APIs.

API version:
Contact: hi@ory.sh
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the VerifyUserCodeRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VerifyUserCodeRequest{}

// VerifyUserCodeRequest struct for VerifyUserCodeRequest
type VerifyUserCodeRequest struct {
	// ID is the identifier (\"device challenge\") of the device request. It is used to identify the session.
	Challenge           *string       `json:"challenge,omitempty"`
	Client              *OAuth2Client `json:"client,omitempty"`
	DeviceCodeRequestId *string       `json:"device_code_request_id,omitempty"`
	HandledAt           *time.Time    `json:"handled_at,omitempty"`
	// RequestURL is the original Device Authorization URL requested.
	RequestUrl                   *string  `json:"request_url,omitempty"`
	RequestedAccessTokenAudience []string `json:"requested_access_token_audience,omitempty"`
	RequestedScope               []string `json:"requested_scope,omitempty"`
}

// NewVerifyUserCodeRequest instantiates a new VerifyUserCodeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVerifyUserCodeRequest() *VerifyUserCodeRequest {
	this := VerifyUserCodeRequest{}
	return &this
}

// NewVerifyUserCodeRequestWithDefaults instantiates a new VerifyUserCodeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVerifyUserCodeRequestWithDefaults() *VerifyUserCodeRequest {
	this := VerifyUserCodeRequest{}
	return &this
}

// GetChallenge returns the Challenge field value if set, zero value otherwise.
func (o *VerifyUserCodeRequest) GetChallenge() string {
	if o == nil || IsNil(o.Challenge) {
		var ret string
		return ret
	}
	return *o.Challenge
}

// GetChallengeOk returns a tuple with the Challenge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerifyUserCodeRequest) GetChallengeOk() (*string, bool) {
	if o == nil || IsNil(o.Challenge) {
		return nil, false
	}
	return o.Challenge, true
}

// HasChallenge returns a boolean if a field has been set.
func (o *VerifyUserCodeRequest) HasChallenge() bool {
	if o != nil && !IsNil(o.Challenge) {
		return true
	}

	return false
}

// SetChallenge gets a reference to the given string and assigns it to the Challenge field.
func (o *VerifyUserCodeRequest) SetChallenge(v string) {
	o.Challenge = &v
}

// GetClient returns the Client field value if set, zero value otherwise.
func (o *VerifyUserCodeRequest) GetClient() OAuth2Client {
	if o == nil || IsNil(o.Client) {
		var ret OAuth2Client
		return ret
	}
	return *o.Client
}

// GetClientOk returns a tuple with the Client field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerifyUserCodeRequest) GetClientOk() (*OAuth2Client, bool) {
	if o == nil || IsNil(o.Client) {
		return nil, false
	}
	return o.Client, true
}

// HasClient returns a boolean if a field has been set.
func (o *VerifyUserCodeRequest) HasClient() bool {
	if o != nil && !IsNil(o.Client) {
		return true
	}

	return false
}

// SetClient gets a reference to the given OAuth2Client and assigns it to the Client field.
func (o *VerifyUserCodeRequest) SetClient(v OAuth2Client) {
	o.Client = &v
}

// GetDeviceCodeRequestId returns the DeviceCodeRequestId field value if set, zero value otherwise.
func (o *VerifyUserCodeRequest) GetDeviceCodeRequestId() string {
	if o == nil || IsNil(o.DeviceCodeRequestId) {
		var ret string
		return ret
	}
	return *o.DeviceCodeRequestId
}

// GetDeviceCodeRequestIdOk returns a tuple with the DeviceCodeRequestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerifyUserCodeRequest) GetDeviceCodeRequestIdOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceCodeRequestId) {
		return nil, false
	}
	return o.DeviceCodeRequestId, true
}

// HasDeviceCodeRequestId returns a boolean if a field has been set.
func (o *VerifyUserCodeRequest) HasDeviceCodeRequestId() bool {
	if o != nil && !IsNil(o.DeviceCodeRequestId) {
		return true
	}

	return false
}

// SetDeviceCodeRequestId gets a reference to the given string and assigns it to the DeviceCodeRequestId field.
func (o *VerifyUserCodeRequest) SetDeviceCodeRequestId(v string) {
	o.DeviceCodeRequestId = &v
}

// GetHandledAt returns the HandledAt field value if set, zero value otherwise.
func (o *VerifyUserCodeRequest) GetHandledAt() time.Time {
	if o == nil || IsNil(o.HandledAt) {
		var ret time.Time
		return ret
	}
	return *o.HandledAt
}

// GetHandledAtOk returns a tuple with the HandledAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerifyUserCodeRequest) GetHandledAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.HandledAt) {
		return nil, false
	}
	return o.HandledAt, true
}

// HasHandledAt returns a boolean if a field has been set.
func (o *VerifyUserCodeRequest) HasHandledAt() bool {
	if o != nil && !IsNil(o.HandledAt) {
		return true
	}

	return false
}

// SetHandledAt gets a reference to the given time.Time and assigns it to the HandledAt field.
func (o *VerifyUserCodeRequest) SetHandledAt(v time.Time) {
	o.HandledAt = &v
}

// GetRequestUrl returns the RequestUrl field value if set, zero value otherwise.
func (o *VerifyUserCodeRequest) GetRequestUrl() string {
	if o == nil || IsNil(o.RequestUrl) {
		var ret string
		return ret
	}
	return *o.RequestUrl
}

// GetRequestUrlOk returns a tuple with the RequestUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerifyUserCodeRequest) GetRequestUrlOk() (*string, bool) {
	if o == nil || IsNil(o.RequestUrl) {
		return nil, false
	}
	return o.RequestUrl, true
}

// HasRequestUrl returns a boolean if a field has been set.
func (o *VerifyUserCodeRequest) HasRequestUrl() bool {
	if o != nil && !IsNil(o.RequestUrl) {
		return true
	}

	return false
}

// SetRequestUrl gets a reference to the given string and assigns it to the RequestUrl field.
func (o *VerifyUserCodeRequest) SetRequestUrl(v string) {
	o.RequestUrl = &v
}

// GetRequestedAccessTokenAudience returns the RequestedAccessTokenAudience field value if set, zero value otherwise.
func (o *VerifyUserCodeRequest) GetRequestedAccessTokenAudience() []string {
	if o == nil || IsNil(o.RequestedAccessTokenAudience) {
		var ret []string
		return ret
	}
	return o.RequestedAccessTokenAudience
}

// GetRequestedAccessTokenAudienceOk returns a tuple with the RequestedAccessTokenAudience field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerifyUserCodeRequest) GetRequestedAccessTokenAudienceOk() ([]string, bool) {
	if o == nil || IsNil(o.RequestedAccessTokenAudience) {
		return nil, false
	}
	return o.RequestedAccessTokenAudience, true
}

// HasRequestedAccessTokenAudience returns a boolean if a field has been set.
func (o *VerifyUserCodeRequest) HasRequestedAccessTokenAudience() bool {
	if o != nil && !IsNil(o.RequestedAccessTokenAudience) {
		return true
	}

	return false
}

// SetRequestedAccessTokenAudience gets a reference to the given []string and assigns it to the RequestedAccessTokenAudience field.
func (o *VerifyUserCodeRequest) SetRequestedAccessTokenAudience(v []string) {
	o.RequestedAccessTokenAudience = v
}

// GetRequestedScope returns the RequestedScope field value if set, zero value otherwise.
func (o *VerifyUserCodeRequest) GetRequestedScope() []string {
	if o == nil || IsNil(o.RequestedScope) {
		var ret []string
		return ret
	}
	return o.RequestedScope
}

// GetRequestedScopeOk returns a tuple with the RequestedScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerifyUserCodeRequest) GetRequestedScopeOk() ([]string, bool) {
	if o == nil || IsNil(o.RequestedScope) {
		return nil, false
	}
	return o.RequestedScope, true
}

// HasRequestedScope returns a boolean if a field has been set.
func (o *VerifyUserCodeRequest) HasRequestedScope() bool {
	if o != nil && !IsNil(o.RequestedScope) {
		return true
	}

	return false
}

// SetRequestedScope gets a reference to the given []string and assigns it to the RequestedScope field.
func (o *VerifyUserCodeRequest) SetRequestedScope(v []string) {
	o.RequestedScope = v
}

func (o VerifyUserCodeRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VerifyUserCodeRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Challenge) {
		toSerialize["challenge"] = o.Challenge
	}
	if !IsNil(o.Client) {
		toSerialize["client"] = o.Client
	}
	if !IsNil(o.DeviceCodeRequestId) {
		toSerialize["device_code_request_id"] = o.DeviceCodeRequestId
	}
	if !IsNil(o.HandledAt) {
		toSerialize["handled_at"] = o.HandledAt
	}
	if !IsNil(o.RequestUrl) {
		toSerialize["request_url"] = o.RequestUrl
	}
	if !IsNil(o.RequestedAccessTokenAudience) {
		toSerialize["requested_access_token_audience"] = o.RequestedAccessTokenAudience
	}
	if !IsNil(o.RequestedScope) {
		toSerialize["requested_scope"] = o.RequestedScope
	}
	return toSerialize, nil
}

type NullableVerifyUserCodeRequest struct {
	value *VerifyUserCodeRequest
	isSet bool
}

func (v NullableVerifyUserCodeRequest) Get() *VerifyUserCodeRequest {
	return v.value
}

func (v *NullableVerifyUserCodeRequest) Set(val *VerifyUserCodeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableVerifyUserCodeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableVerifyUserCodeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVerifyUserCodeRequest(val *VerifyUserCodeRequest) *NullableVerifyUserCodeRequest {
	return &NullableVerifyUserCodeRequest{value: val, isSet: true}
}

func (v NullableVerifyUserCodeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVerifyUserCodeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
