/*
Ory Hydra API

Documentation for all of Ory Hydra's APIs.

API version:
Contact: hi@ory.sh
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the OAuth2ConsentSession type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OAuth2ConsentSession{}

// OAuth2ConsentSession A completed OAuth 2.0 Consent Session.
type OAuth2ConsentSession struct {
	ConsentRequest *OAuth2ConsentRequest `json:"consent_request,omitempty"`
	// ConsentRequestID is the identifier of the consent request that initiated this consent session.
	ConsentRequestId         *string                        `json:"consent_request_id,omitempty"`
	Context                  interface{}                    `json:"context,omitempty"`
	ExpiresAt                *OAuth2ConsentSessionExpiresAt `json:"expires_at,omitempty"`
	GrantAccessTokenAudience []string                       `json:"grant_access_token_audience,omitempty"`
	GrantScope               []string                       `json:"grant_scope,omitempty"`
	HandledAt                *time.Time                     `json:"handled_at,omitempty"`
	// Remember Consent  Remember, if set to true, tells ORY Hydra to remember this consent authorization and reuse it if the same client asks the same user for the same, or a subset of, scope.
	Remember *bool `json:"remember,omitempty"`
	// Remember Consent For  RememberFor sets how long the consent authorization should be remembered for in seconds. If set to `0`, the authorization will be remembered indefinitely.
	RememberFor *int64                             `json:"remember_for,omitempty"`
	Session     *AcceptOAuth2ConsentRequestSession `json:"session,omitempty"`
}

// NewOAuth2ConsentSession instantiates a new OAuth2ConsentSession object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOAuth2ConsentSession() *OAuth2ConsentSession {
	this := OAuth2ConsentSession{}
	return &this
}

// NewOAuth2ConsentSessionWithDefaults instantiates a new OAuth2ConsentSession object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOAuth2ConsentSessionWithDefaults() *OAuth2ConsentSession {
	this := OAuth2ConsentSession{}
	return &this
}

// GetConsentRequest returns the ConsentRequest field value if set, zero value otherwise.
func (o *OAuth2ConsentSession) GetConsentRequest() OAuth2ConsentRequest {
	if o == nil || IsNil(o.ConsentRequest) {
		var ret OAuth2ConsentRequest
		return ret
	}
	return *o.ConsentRequest
}

// GetConsentRequestOk returns a tuple with the ConsentRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuth2ConsentSession) GetConsentRequestOk() (*OAuth2ConsentRequest, bool) {
	if o == nil || IsNil(o.ConsentRequest) {
		return nil, false
	}
	return o.ConsentRequest, true
}

// HasConsentRequest returns a boolean if a field has been set.
func (o *OAuth2ConsentSession) HasConsentRequest() bool {
	if o != nil && !IsNil(o.ConsentRequest) {
		return true
	}

	return false
}

// SetConsentRequest gets a reference to the given OAuth2ConsentRequest and assigns it to the ConsentRequest field.
func (o *OAuth2ConsentSession) SetConsentRequest(v OAuth2ConsentRequest) {
	o.ConsentRequest = &v
}

// GetConsentRequestId returns the ConsentRequestId field value if set, zero value otherwise.
func (o *OAuth2ConsentSession) GetConsentRequestId() string {
	if o == nil || IsNil(o.ConsentRequestId) {
		var ret string
		return ret
	}
	return *o.ConsentRequestId
}

// GetConsentRequestIdOk returns a tuple with the ConsentRequestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuth2ConsentSession) GetConsentRequestIdOk() (*string, bool) {
	if o == nil || IsNil(o.ConsentRequestId) {
		return nil, false
	}
	return o.ConsentRequestId, true
}

// HasConsentRequestId returns a boolean if a field has been set.
func (o *OAuth2ConsentSession) HasConsentRequestId() bool {
	if o != nil && !IsNil(o.ConsentRequestId) {
		return true
	}

	return false
}

// SetConsentRequestId gets a reference to the given string and assigns it to the ConsentRequestId field.
func (o *OAuth2ConsentSession) SetConsentRequestId(v string) {
	o.ConsentRequestId = &v
}

// GetContext returns the Context field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OAuth2ConsentSession) GetContext() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OAuth2ConsentSession) GetContextOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Context) {
		return nil, false
	}
	return &o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *OAuth2ConsentSession) HasContext() bool {
	if o != nil && IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given interface{} and assigns it to the Context field.
func (o *OAuth2ConsentSession) SetContext(v interface{}) {
	o.Context = v
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise.
func (o *OAuth2ConsentSession) GetExpiresAt() OAuth2ConsentSessionExpiresAt {
	if o == nil || IsNil(o.ExpiresAt) {
		var ret OAuth2ConsentSessionExpiresAt
		return ret
	}
	return *o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuth2ConsentSession) GetExpiresAtOk() (*OAuth2ConsentSessionExpiresAt, bool) {
	if o == nil || IsNil(o.ExpiresAt) {
		return nil, false
	}
	return o.ExpiresAt, true
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *OAuth2ConsentSession) HasExpiresAt() bool {
	if o != nil && !IsNil(o.ExpiresAt) {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given OAuth2ConsentSessionExpiresAt and assigns it to the ExpiresAt field.
func (o *OAuth2ConsentSession) SetExpiresAt(v OAuth2ConsentSessionExpiresAt) {
	o.ExpiresAt = &v
}

// GetGrantAccessTokenAudience returns the GrantAccessTokenAudience field value if set, zero value otherwise.
func (o *OAuth2ConsentSession) GetGrantAccessTokenAudience() []string {
	if o == nil || IsNil(o.GrantAccessTokenAudience) {
		var ret []string
		return ret
	}
	return o.GrantAccessTokenAudience
}

// GetGrantAccessTokenAudienceOk returns a tuple with the GrantAccessTokenAudience field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuth2ConsentSession) GetGrantAccessTokenAudienceOk() ([]string, bool) {
	if o == nil || IsNil(o.GrantAccessTokenAudience) {
		return nil, false
	}
	return o.GrantAccessTokenAudience, true
}

// HasGrantAccessTokenAudience returns a boolean if a field has been set.
func (o *OAuth2ConsentSession) HasGrantAccessTokenAudience() bool {
	if o != nil && !IsNil(o.GrantAccessTokenAudience) {
		return true
	}

	return false
}

// SetGrantAccessTokenAudience gets a reference to the given []string and assigns it to the GrantAccessTokenAudience field.
func (o *OAuth2ConsentSession) SetGrantAccessTokenAudience(v []string) {
	o.GrantAccessTokenAudience = v
}

// GetGrantScope returns the GrantScope field value if set, zero value otherwise.
func (o *OAuth2ConsentSession) GetGrantScope() []string {
	if o == nil || IsNil(o.GrantScope) {
		var ret []string
		return ret
	}
	return o.GrantScope
}

// GetGrantScopeOk returns a tuple with the GrantScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuth2ConsentSession) GetGrantScopeOk() ([]string, bool) {
	if o == nil || IsNil(o.GrantScope) {
		return nil, false
	}
	return o.GrantScope, true
}

// HasGrantScope returns a boolean if a field has been set.
func (o *OAuth2ConsentSession) HasGrantScope() bool {
	if o != nil && !IsNil(o.GrantScope) {
		return true
	}

	return false
}

// SetGrantScope gets a reference to the given []string and assigns it to the GrantScope field.
func (o *OAuth2ConsentSession) SetGrantScope(v []string) {
	o.GrantScope = v
}

// GetHandledAt returns the HandledAt field value if set, zero value otherwise.
func (o *OAuth2ConsentSession) GetHandledAt() time.Time {
	if o == nil || IsNil(o.HandledAt) {
		var ret time.Time
		return ret
	}
	return *o.HandledAt
}

// GetHandledAtOk returns a tuple with the HandledAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuth2ConsentSession) GetHandledAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.HandledAt) {
		return nil, false
	}
	return o.HandledAt, true
}

// HasHandledAt returns a boolean if a field has been set.
func (o *OAuth2ConsentSession) HasHandledAt() bool {
	if o != nil && !IsNil(o.HandledAt) {
		return true
	}

	return false
}

// SetHandledAt gets a reference to the given time.Time and assigns it to the HandledAt field.
func (o *OAuth2ConsentSession) SetHandledAt(v time.Time) {
	o.HandledAt = &v
}

// GetRemember returns the Remember field value if set, zero value otherwise.
func (o *OAuth2ConsentSession) GetRemember() bool {
	if o == nil || IsNil(o.Remember) {
		var ret bool
		return ret
	}
	return *o.Remember
}

// GetRememberOk returns a tuple with the Remember field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuth2ConsentSession) GetRememberOk() (*bool, bool) {
	if o == nil || IsNil(o.Remember) {
		return nil, false
	}
	return o.Remember, true
}

// HasRemember returns a boolean if a field has been set.
func (o *OAuth2ConsentSession) HasRemember() bool {
	if o != nil && !IsNil(o.Remember) {
		return true
	}

	return false
}

// SetRemember gets a reference to the given bool and assigns it to the Remember field.
func (o *OAuth2ConsentSession) SetRemember(v bool) {
	o.Remember = &v
}

// GetRememberFor returns the RememberFor field value if set, zero value otherwise.
func (o *OAuth2ConsentSession) GetRememberFor() int64 {
	if o == nil || IsNil(o.RememberFor) {
		var ret int64
		return ret
	}
	return *o.RememberFor
}

// GetRememberForOk returns a tuple with the RememberFor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuth2ConsentSession) GetRememberForOk() (*int64, bool) {
	if o == nil || IsNil(o.RememberFor) {
		return nil, false
	}
	return o.RememberFor, true
}

// HasRememberFor returns a boolean if a field has been set.
func (o *OAuth2ConsentSession) HasRememberFor() bool {
	if o != nil && !IsNil(o.RememberFor) {
		return true
	}

	return false
}

// SetRememberFor gets a reference to the given int64 and assigns it to the RememberFor field.
func (o *OAuth2ConsentSession) SetRememberFor(v int64) {
	o.RememberFor = &v
}

// GetSession returns the Session field value if set, zero value otherwise.
func (o *OAuth2ConsentSession) GetSession() AcceptOAuth2ConsentRequestSession {
	if o == nil || IsNil(o.Session) {
		var ret AcceptOAuth2ConsentRequestSession
		return ret
	}
	return *o.Session
}

// GetSessionOk returns a tuple with the Session field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuth2ConsentSession) GetSessionOk() (*AcceptOAuth2ConsentRequestSession, bool) {
	if o == nil || IsNil(o.Session) {
		return nil, false
	}
	return o.Session, true
}

// HasSession returns a boolean if a field has been set.
func (o *OAuth2ConsentSession) HasSession() bool {
	if o != nil && !IsNil(o.Session) {
		return true
	}

	return false
}

// SetSession gets a reference to the given AcceptOAuth2ConsentRequestSession and assigns it to the Session field.
func (o *OAuth2ConsentSession) SetSession(v AcceptOAuth2ConsentRequestSession) {
	o.Session = &v
}

func (o OAuth2ConsentSession) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OAuth2ConsentSession) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConsentRequest) {
		toSerialize["consent_request"] = o.ConsentRequest
	}
	if !IsNil(o.ConsentRequestId) {
		toSerialize["consent_request_id"] = o.ConsentRequestId
	}
	if o.Context != nil {
		toSerialize["context"] = o.Context
	}
	if !IsNil(o.ExpiresAt) {
		toSerialize["expires_at"] = o.ExpiresAt
	}
	if !IsNil(o.GrantAccessTokenAudience) {
		toSerialize["grant_access_token_audience"] = o.GrantAccessTokenAudience
	}
	if !IsNil(o.GrantScope) {
		toSerialize["grant_scope"] = o.GrantScope
	}
	if !IsNil(o.HandledAt) {
		toSerialize["handled_at"] = o.HandledAt
	}
	if !IsNil(o.Remember) {
		toSerialize["remember"] = o.Remember
	}
	if !IsNil(o.RememberFor) {
		toSerialize["remember_for"] = o.RememberFor
	}
	if !IsNil(o.Session) {
		toSerialize["session"] = o.Session
	}
	return toSerialize, nil
}

type NullableOAuth2ConsentSession struct {
	value *OAuth2ConsentSession
	isSet bool
}

func (v NullableOAuth2ConsentSession) Get() *OAuth2ConsentSession {
	return v.value
}

func (v *NullableOAuth2ConsentSession) Set(val *OAuth2ConsentSession) {
	v.value = val
	v.isSet = true
}

func (v NullableOAuth2ConsentSession) IsSet() bool {
	return v.isSet
}

func (v *NullableOAuth2ConsentSession) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOAuth2ConsentSession(val *OAuth2ConsentSession) *NullableOAuth2ConsentSession {
	return &NullableOAuth2ConsentSession{value: val, isSet: true}
}

func (v NullableOAuth2ConsentSession) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOAuth2ConsentSession) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
